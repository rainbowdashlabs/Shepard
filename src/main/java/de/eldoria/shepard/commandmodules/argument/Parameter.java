package de.eldoria.shepard.commandmodules.argument;

import de.eldoria.shepard.webapi.apiobjects.commandserialization.ParameterInfo;

import javax.annotation.Nullable;

/**
 * Defines a sub argument.
 * A sub argument is a command arg, but is depending on the {@link SubCommand} command.
 * A sub argument can hold a {@link #shortCommand} which is generated by {@link #generateShortCommand(int)}
 */
public final class Parameter {
    // General parameter
    private final boolean command;

    // Required for parameter command
    /**
     * Name of the command name.
     */
    private String commandName;
    /**
     * Name of the short command. Must be generated from commandName.
     */
    private String shortCommand;

    // Required for parameter input
    /**
     * Name which should be displayed in help at parameter position.
     */
    private String inputName;
    /**
     * Text which should be displayed in help under the command.
     */
    private String inputDescription;
    /**
     * Is the input required. No following parameter can be required if this is false.
     */
    private boolean required;

    /**
     * Create a new command parameter.
     *
     * @param commandName name of the command.
     */
    private Parameter(String commandName) {
        command = true;
        this.commandName = commandName;
    }


    /**
     * Creates a new argument.
     *
     * @param inputName        name of the argument or subCommand
     * @param inputDescription locale code for localization
     * @param required         true if the input is required. if false no following input can be required
     */
    private Parameter(String inputName, String inputDescription, boolean required) {
        this.inputName = inputName;
        this.inputDescription = inputDescription;
        this.required = required;
        this.command = false;
    }

    /**
     * Create a new input parameter.
     *
     * @param inputName        parameter name
     * @param inputDescription parameter description
     * @param required         true if parameter ist required
     * @return new Parameter object
     */
    public static Parameter createInput(String inputName, @Nullable String inputDescription, boolean required) {
        return new Parameter(inputName, inputDescription, required);
    }

    /**
     * Create a new command parameter.
     *
     * @param commandName name of the command
     * @return new Parameter object
     */
    public static Parameter createCommand(String commandName) {
        return new Parameter(commandName);
    }

    /**
     * Get the argument name. Can be the subCommand or the argument name.
     *
     * @return argument name or subCommand
     */
    public String getInputName() {
        return inputName;
    }

    /**
     * Returns the input description in format:
     * If argument: "[argument] -> [description]"
     * If subcommand: "[argument] | [shortCommand] -> [description]".
     *
     * @return Argument description.
     */
    public String getInputDesc() {
        return "**" + (required ? "<$" + inputName + "$>" : "[$" + inputName + "$]") + "** -> $" + inputDescription + "$";
        //.replace("\n", "\n> ");
    }

    /**
     * Get the short command of the subcommand.
     *
     * @return short command or null if it is not a sub command.
     */
    public String getShortCommand() {
        return shortCommand;
    }

    /**
     * set the short command for the parameter.
     *
     * @param shortCommand short command to set
     */
    public void setShortCommand(String shortCommand) {
        this.shortCommand = shortCommand;
    }

    private String getCommandString() {
        return inputName + " | " + shortCommand.toLowerCase();
    }

    /**
     * Returns true if the cmd matches the argument name or the short command.
     *
     * @param cmd command to test
     * @return true if a match is found. Always false if arg is not a command.
     */
    public boolean isCommandParameter(String cmd) {
        if (command) {
            return cmd.equalsIgnoreCase(commandName) || cmd.equalsIgnoreCase(shortCommand);
        } else {
            return true;
        }
    }

    /**
     * Checks if the argument is a subcommand.
     *
     * @return true if it is a subcommand
     */
    public boolean isCommand() {
        return command;
    }

    /**
     * Generate the short command with additional length.
     *
     * @param additionalLength length of short command.
     * @return the short command.
     */
    public String generateShortCommand(int additionalLength) {
        char[] argumentName = getCommandName().toCharArray();
        StringBuilder shortCommand = new StringBuilder();
        shortCommand.append(argumentName[0]);
        for (int i = 0; i < additionalLength; i++) {
            shortCommand.append(argumentName[i + 1]);
        }
        for (char c : argumentName) {
            if (Character.isUpperCase(c)) {
                shortCommand.append(c);
            }
        }
        return (shortCommand.toString());
    }

    /**
     * Get the locale tag of the argument.
     *
     * @return locale tag as string
     */
    public String getInputDescription() {
        return inputDescription;
    }

    /**
     * Get the command Name.
     *
     * @return name of command
     */
    public String getCommandName() {
        return commandName;
    }

    /**
     * Check if the command is required.
     *
     * @return true if input is required or if parameter is a command
     */
    public boolean isRequired() {
        return required || isCommand();
    }

    /**
     * Get a parameter as parameter info object.
     *
     * @return parameter info object of parameter
     */
    public ParameterInfo getParameterInfo() {
        return new ParameterInfo(isCommand(), commandName, shortCommand, inputName, inputDescription, required);
    }
}
